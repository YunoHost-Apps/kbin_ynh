packaging_format = 2

id = "kbin"
name = "/kbin"
description.en = "/kbin is a decentralized content aggregator and microblogging platform running on the Fediverse network."
description.fr = "/kbin est un agrégateur de contenu décentralisé et une plateforme de microblogging fonctionnant sur le réseau Fediverse."
description.es = "/kbin es un agregador descentralizado de contenido y plataforma de microblogging que funciona en la red del Fediverso."

version = "1.0~ynh1"

maintainers = ["csolisr@gmail.com"]

[upstream]
# NB: Only the "license" key is mandatory. Remove entries for which there's no relevant data
license = "AGPL-3.0"
website = "https://kbin.pub"
demo = "https://kbin.social"
admindoc = "https://codeberg.org/Kbin/kbin-core/wiki#user-content-admin-guide"
userdoc = "https://codeberg.org/Kbin/kbin-core/wiki#user-content-user-guide"
code = "https://codeberg.org/Kbin/kbin-core"
# FIXME: optional but recommended if relevant, this is meant to contain the Common Platform Enumeration, which is sort of a standard id for applications defined by the NIST. In particular, YunoHost may use this is in the future to easily track CVE (=security reports) related to apps. The CPE may be obtained by searching here: https://nvd.nist.gov/products/cpe/search. For example, for Nextcloud, the CPE is 'cpe:2.3:a:nextcloud:nextcloud' (no need to include the version number)
#cpe = "???"
# FIXME: optional but recommended (or remove if irrelevant / not applicable). This is meant to be an URL where people can financially support this app, especially when its development is based on volunteers and/or financed by its community. YunoHost may later advertise it in the webadmin.
#fund = "???"

[integration]
yunohost = ">= 11.1.14"
# FIXME: can be replaced by a list of supported archs using the dpkg --print-architecture nomenclature (amd64/i386/armhf/arm64), for example: ["amd64", "i386"]
architectures = "all"
multi_instance = true
# Replace with true, false, or "not_relevant". Not to confuse with the "sso" key: the "ldap" key corresponds to wether or not a user *can* login on the app using its YunoHost credentials.
ldap = "false"
# Replace with true, false, or "not_relevant". Not to confuse with the "ldap" key: the "sso" key corresponds to wether or not a user is *automatically logged-in* on the app when logged-in on the YunoHost portal.
sso = "false"
# Replace with an **estimate** minimum disk and RAM requirements. e.g. 20M, 400M, 1G...
disk = "256M"
ram.build = "512M"
ram.runtime = "512M"

[install]
    [install.domain]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    type = "domain"

    [install.path]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    type = "path"
    default = "/example"

    [install.init_main_permission]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    # This won't be saved as setting and will instead be used to initialize the SSOwat permission
    type = "group"
    default = "visitors"

    [install.language]
    ask.en = "Choose the application language"
    ask.fr = "Choisissez la langue de l'application"
    ask.es = "Elija el idioma de la aplicación"
    type = "string"
    choices = ["fr", "en", "es"]
    default = "en"

    [install.admin]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    type = "user"

    [install.password]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    # Note that user-provided passwords questions are not automatically saved as setting
    help.en = "Use the help field to add an information for the admin about this question."
    help.fr = "Utilisez le champ aide pour ajouter une information à l'intention de l'administrateur à propos de cette question."
    help.es = "Use el campo de ayuda para añadir información para el administrador respecto a esta pregunta."
    type = "password"

    [install.federate]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    # Note that user-provided passwords questions are not automatically saved as setting
    help.en = "Do you want this instance to enable federation?"
    help.fr = "Voulez-vous que cette instance ait la fédération activée?"
    help.es = "¿Desea que esta instancia active la federación?"
    type = "boolean"
    default = "true"

    [install.register]
    # this is a generic question - ask strings are automatically handled by YunoHost's core
    # Note that user-provided passwords questions are not automatically saved as setting
    help.en = "Do you want this instance to have open registration?"
    help.fr = "Voulez-vous que cette instance ait un enregistrement ouvert?"
    help.es = "¿Desea que esta instancia tenga registros abiertos?"
    type = "boolean"
    default = "false"

[resources]
    # See the packaging documentation for the full set
    # of explanation regarding the behavior and properties for each of those

    [resources.sources]

        [resources.sources.main]
        # FIXME: This will pre-fetch the asset which can then be deployed during the install/upgrade scripts with :
        #    ynh_setup_source --dest_dir="$install_dir"
        # You can also define other assets than "main" and add --source_id="foobar" in the previous command
        url = "https://codeberg.org/Kbin/kbin-core/archive/edb4380fa26eef709b36f1014853d796b28a79d0.tar.gz"
        sha256 = "70313a9503ae2782e84d4f4a0a24fc6a29de1d2eea5d65463348dbcba870ff04"

        # These infos are used by https://github.com/YunoHost/apps/blob/master/tools/autoupdate_app_sources/autoupdate_app_sources.py
        # to auto-update the previous asset urls and sha256sum + manifest version
        # assuming the upstream's code repo is on github and relies on tags or releases
        # See the 'sources' resource documentation for more details

        # autoupdate.strategy = "latest_github_tag"

    [resources.system_user]
    # This will provision/deprovision a unix system user

    [resources.install_dir]
    # This will create/remove the install dir as /var/www/$app
    # and store the corresponding setting $install_dir

    [resources.data_dir]
    # This will create/remove the data dir as /home/yunohost.app/$app
    # and store the corresponding setting $data_dir

    [resources.permissions]
    # This will configure SSOwat permission for $domain/$path/
    # The initial allowed group of user is configured via the init_main_permission question (public=visitors, private=all_users)
    main.url = "/"

    [resources.ports]
    # This will pick a random port for reverse-proxying and store it as the $port setting

    [resources.apt]
    # This will automatically install/uninstall the following apt packages
    # and implicitly define the $phpversion setting as 8.0 (if phpX.Y-foobar dependencies are listed)
    packages = "git, redis-server, postgresql, postgresql-contrib, nginx, php8.2-common, php8.2-fpm, php8.2-cli, php8.2-amqp, php8.2-pgsql, php8.2-gd, php8.2-curl, php8.2-simplexml, php8.2-dom, php8.2-xml, php8.2-redis, php8.2-intl, unzip"

    [resources.database]
    # This will automatically provision/deprovison a MySQL DB and store the corresponding credentials in settings $db_user, $db_name, $db_pwd
    type = "postgresql"
